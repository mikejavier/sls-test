service: pedirPizzas

provider:
  name: aws
  runtime: nodejs8.10
  region: sa-east-1
  environment:
    REGION: ${self:provider.region}
    PENDING_ORDER_QUEUE:
      Ref: PendingOrdersQueue
    COMPLETED_ORDER_TABLE: CompletedOrderTable
      
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sqs:SendMessage"
      Resource: "arn:aws:sqs:${self:provider.region}:*:PendingOrdersQueue"
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COMPLETED_ORDER_TABLE}"


functions:
  hacerPedido:
    handler: handler.hacerPedido
    events:
      - http:
          method: post
          path: pedido

  prepararPedido:
    handler: handler.prepararPedido
    events:
    - sqs:
        arn:
          Fn::GetAtt:
            - PendingOrdersQueue
            - Arn

  pedidoStatus:
    handler: handler.pedidoStatus
    events:
    - http:
        method: get
        path: /pedido/{id}

resources:
  Resources:
    PendingOrdersQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "PendingOrdersQueue"
    CompletedOrdersTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "orderId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "orderId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.COMPLETED_ORDER_TABLE}

plugins:
  - serverless-offline-sqs
  - serverless-offline